apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap
  labels:
    app.kubernetes.io/name: dataverse
    app.kubernetes.io/instance: dataverse-{{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: bootstrap
    app.kubernetes.io/part-of: dataverse
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "-5"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dataverse
        app.kubernetes.io/instance: dataverse-{{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/component: bootstrap
        app.kubernetes.io/part-of: dataverse
    spec:
      containers:
        - image: {{ .Values.images.configbaker}}
          name: dataverse-configbaker
          command: [ "bootstrap.sh", "-u", "http://{{ .Release.Name }}-dataverse-svc:8080","{{ .Values.persona }}" ]
          env:
            - name: DATAVERSE_INSTALLATION_NAME
              value: {{.Values.dataverse.installation_name}}
            - name: METADATABLOCKS_PATH
              value: "/metadatablocks"
            - name: LICENCE_PATH
              value: "/licence"
            - name: DATAVERSES_PATH
              value: "/dataverses"
            - name: ROLES_PATH
              value: "/roles"
            - name: USERS_PATH
              value: "/users"
            - name: DATAVERSE_DB_HOST
              value: "{{ .Release.Name }}-dataverse-postgres-pooler"
            - name: DATAVERSE_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dataverse.{{ .Release.Name }}-dataverse-postgres.credentials.postgresql.acid.zalan.do
                  key: password
            - name: DATAVERSE_DB_USER
              valueFrom:
                secretKeyRef:
                  name: dataverse.{{ .Release.Name }}-dataverse-postgres.credentials.postgresql.acid.zalan.do
                  key: username
          volumeMounts:
            - name: script
              mountPath: "/scripts/bootstrap/{{ .Values.persona }}"
            - name: metadatablocks
              mountPath: "/metadatablocks"
            - name: licence
              mountPath: "/licence"
            - name: dataverses
              mountPath: "/dataverses"
            - name: roles
              mountPath: "/roles"
            - name: users
              mountPath: "/users"
      volumes:
        - name: script
          configMap:
            name: {{ .Release.Name }}-dataverse-bootstrap-configmap
            defaultMode: 0500
        - name: metadatablocks
          configMap:
            name: {{ .Release.Name }}-dataverse-bootstrap-metadatablocks
        - name: licence
          configMap:
            name: {{ .Release.Name }}-dataverse-bootstrap-licences
        - name: dataverses
          configMap:
            name: {{ .Release.Name }}-dataverse-bootstrap-dataverses
        - name: roles
          configMap:
            name: {{ .Release.Name }}-dataverse-bootstrap-roles
        - name: users
          configMap:
            name: {{ .Release.Name }}-dataverse-bootstrap-users
      restartPolicy: Never
      initContainers:
        - name: check-dataverse-ready
          image: giantswarm/tiny-tools
          env:
            - name: DATAVERSE_HOSTNAME
              value: {{ .Release.Name }}-dataverse-svc
          command: [ "/bin/sh","-c" ]
          args: [ 'while [ $(curl -ksw "%{http_code}" http://$DATAVERSE_HOSTNAME:8080/api/info/version -o /dev/null) -ne 200 ]; do sleep 5; echo "health check failed . Waiting for the service..."; done' ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap-metadatablocks
data:
{{ (.Files.Glob (print "persona/" .Values.persona "/metadatablocks/*")).AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap-licences
data:
{{ (.Files.Glob (print "persona/" .Values.persona "/licence/*")).AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap-dataverses
data:
{{ (.Files.Glob (print "persona/" .Values.persona "/dataverses/*")).AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap-roles
data:
{{ (.Files.Glob (print "persona/" .Values.persona "/roles/*")).AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap-users
data:
{{ (.Files.Glob (print "persona/" .Values.persona "/users/*")).AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dataverse-bootstrap-configmap
data:
{{ (.Files.Glob (print "persona/" .Values.persona "/*")).AsConfig | indent 2 }}
  keycloak.json: |
    {
      "id": "oidc-keycloak",
      "factoryAlias": "oidc",
      "title": "SSO OIDC",
      "subtitle": "SSO OIDC",
      "factoryData": "type: oidc | issuer: {{.Values.dataverse.oidc.issuer}} | clientId: {{.Values.dataverse.oidc.cliedid}} | clientSecret: {{.Values.dataverse.oidc.clientsecret}}",
      "enabled": true
    }